# Install required dependencies
%cd /content

# Clone the repository (using main branch instead of dev)
!git clone https://github.com/wirapratamaz/TripoSR.git
%cd /content/TripoSR

# Ensure we have the latest updates from main branch
!git checkout main
!git pull origin main

# Install basic dependencies
!pip install -q trimesh omegaconf einops rembg

# Install torchmcubes with CUDA support
!pip install -q git+https://github.com/tatsy/torchmcubes.git

# Install compatible versions of required packages
!pip install huggingface-hub==0.26.0
!pip install transformers==4.35.0
!pip install accelerate==0.20.3
!pip install diffusers==0.14.0

# Install additional dependencies
!pip install -q xatlas==0.0.9
!pip install -q imageio[ffmpeg]
!pip install -q onnxruntime
!pip install scipy>=1.11.0
!pip install -q aiofiles fastapi pandas orjson typing-extensions

# First uninstall any existing gradio installation to avoid conflicts
!pip uninstall -y gradio

# Install specific version of Gradio known to work better with this application
# Version 3.13.0 has been reported to work better than 3.9.0 for some similar issues
!pip install gradio==3.13.0

# Install from requirements.txt (skip gradio which will be installed by the line above)
!pip install -r requirements.txt --no-deps

# Set up environment variables for better GPU memory management
import os
os.environ['PYTORCH_CUDA_ALLOC_CONF'] = 'max_split_size_mb:128'

# Verify CUDA availability
import torch
print(f"CUDA available: {torch.cuda.is_available()}")
if torch.cuda.is_available():
    print(f"CUDA device: {torch.cuda.get_device_name(0)}")
    print(f"CUDA memory: {torch.cuda.get_device_properties(0).total_memory / 1e9:.2f} GB")

# Verify repository exists
!ls -la /content/TripoSR

# Patch the run_example function in gradio_app.py to properly handle numpy float values
print("Patching gradio_app.py to fix numpy.float64 issue...")
patch_code = '''
import re

# Read the file
with open('gradio_app.py', 'r') as file:
    content = file.read()

# Fix the run_example function to convert numpy floats to Python floats
run_example_pattern = r'def run_example\(image_pil\):(.*?)return \[preprocessed\] \+ result'
run_example_replacement = """def run_example(image_pil):
    preprocessed = preprocess(image_pil, False, 0.9)
    result = generate(
        preprocessed, 128, None, ["obj", "glb"],
        "Standard", 7, 0.3
    )
    
    # Convert numpy floats to Python floats
    processed_result = []
    for item in result:
        if hasattr(item, 'dtype') and 'float' in str(item.dtype):
            processed_result.append(float(item))
        else:
            processed_result.append(item)
    
    # Return the processed values
    return [
        preprocessed,           # processed_image
        processed_result[0],    # output_model_obj (obj_path)
        processed_result[1],    # output_model_glb (glb_path)
        processed_result[4],    # f1_metric
        processed_result[5],    # uhd_metric
        processed_result[6],    # tmd_metric
        processed_result[7],    # chamfer_distance
        processed_result[8],    # iou
        processed_result[9],    # metrics_text
        processed_result[10],   # radar_plot
        processed_result[11]    # bar_plot
    ]"""

updated_content = re.sub(run_example_pattern, run_example_replacement, content, flags=re.DOTALL)

# Write the updated content back to the file
with open('gradio_app.py', 'w') as file:
    file.write(updated_content)

print("Patching complete!")
'''

with open('patch_script.py', 'w') as file:
    file.write(patch_code)

!python patch_script.py

# Run the Gradio app
%cd /content/TripoSR
!python gradio_app.py --queuesize 1 --share
